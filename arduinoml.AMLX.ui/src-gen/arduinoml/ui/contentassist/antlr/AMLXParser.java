/*
* generated by Xtext
*/
package arduinoml.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import arduinoml.services.AMLXGrammarAccess;

public class AMLXParser extends AbstractContentAssistParser {
	
	@Inject
	private AMLXGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected arduinoml.ui.contentassist.antlr.internal.InternalAMLXParser createParser() {
		arduinoml.ui.contentassist.antlr.internal.InternalAMLXParser result = new arduinoml.ui.contentassist.antlr.internal.InternalAMLXParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBrickAccess().getAlternatives(), "rule__Brick__Alternatives");
					put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getMachineAccess().getGroup(), "rule__Machine__Group__0");
					put(grammarAccess.getMachineAccess().getGroup_4(), "rule__Machine__Group_4__0");
					put(grammarAccess.getMachineAccess().getGroup_4_3(), "rule__Machine__Group_4_3__0");
					put(grammarAccess.getMachineAccess().getGroup_8(), "rule__Machine__Group_8__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getStateAccess().getGroup_4(), "rule__State__Group_4__0");
					put(grammarAccess.getStateAccess().getGroup_4_3(), "rule__State__Group_4_3__0");
					put(grammarAccess.getStateAccess().getGroup_5(), "rule__State__Group_5__0");
					put(grammarAccess.getStateAccess().getGroup_5_3(), "rule__State__Group_5_3__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
					put(grammarAccess.getActuatorAccess().getGroup(), "rule__Actuator__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_7(), "rule__Transition__Group_7__0");
					put(grammarAccess.getDigitalActionAccess().getGroup(), "rule__DigitalAction__Group__0");
					put(grammarAccess.getDigitalSensorConditionAccess().getGroup(), "rule__DigitalSensorCondition__Group__0");
					put(grammarAccess.getTimeConditionAccess().getGroup(), "rule__TimeCondition__Group__0");
					put(grammarAccess.getMachineAccess().getStartAssignment_3(), "rule__Machine__StartAssignment_3");
					put(grammarAccess.getMachineAccess().getBricksAssignment_4_2(), "rule__Machine__BricksAssignment_4_2");
					put(grammarAccess.getMachineAccess().getBricksAssignment_4_3_1(), "rule__Machine__BricksAssignment_4_3_1");
					put(grammarAccess.getMachineAccess().getStatesAssignment_7(), "rule__Machine__StatesAssignment_7");
					put(grammarAccess.getMachineAccess().getStatesAssignment_8_1(), "rule__Machine__StatesAssignment_8_1");
					put(grammarAccess.getStateAccess().getNameAssignment_2(), "rule__State__NameAssignment_2");
					put(grammarAccess.getStateAccess().getTransitionsAssignment_4_2(), "rule__State__TransitionsAssignment_4_2");
					put(grammarAccess.getStateAccess().getTransitionsAssignment_4_3_1(), "rule__State__TransitionsAssignment_4_3_1");
					put(grammarAccess.getStateAccess().getActionsAssignment_5_2(), "rule__State__ActionsAssignment_5_2");
					put(grammarAccess.getStateAccess().getActionsAssignment_5_3_1(), "rule__State__ActionsAssignment_5_3_1");
					put(grammarAccess.getSensorAccess().getNameAssignment_1(), "rule__Sensor__NameAssignment_1");
					put(grammarAccess.getSensorAccess().getPinAssignment_4(), "rule__Sensor__PinAssignment_4");
					put(grammarAccess.getActuatorAccess().getNameAssignment_1(), "rule__Actuator__NameAssignment_1");
					put(grammarAccess.getActuatorAccess().getPinAssignment_4(), "rule__Actuator__PinAssignment_4");
					put(grammarAccess.getTransitionAccess().getGotoAssignment_3(), "rule__Transition__GotoAssignment_3");
					put(grammarAccess.getTransitionAccess().getConditionsAssignment_6(), "rule__Transition__ConditionsAssignment_6");
					put(grammarAccess.getTransitionAccess().getConditionsAssignment_7_1(), "rule__Transition__ConditionsAssignment_7_1");
					put(grammarAccess.getDigitalActionAccess().getBStateAssignment_3(), "rule__DigitalAction__BStateAssignment_3");
					put(grammarAccess.getDigitalActionAccess().getActuatorAssignment_5(), "rule__DigitalAction__ActuatorAssignment_5");
					put(grammarAccess.getDigitalSensorConditionAccess().getBStateAssignment_3(), "rule__DigitalSensorCondition__BStateAssignment_3");
					put(grammarAccess.getDigitalSensorConditionAccess().getSensorAssignment_5(), "rule__DigitalSensorCondition__SensorAssignment_5");
					put(grammarAccess.getTimeConditionAccess().getTimeAssignment_3(), "rule__TimeCondition__TimeAssignment_3");
					put(grammarAccess.getTimeConditionAccess().getTCompAssignment_5(), "rule__TimeCondition__TCompAssignment_5");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			arduinoml.ui.contentassist.antlr.internal.InternalAMLXParser typedParser = (arduinoml.ui.contentassist.antlr.internal.InternalAMLXParser) parser;
			typedParser.entryRuleMachine();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AMLXGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AMLXGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
