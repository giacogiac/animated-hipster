/*
* generated by Xtext
*/
package arduinoml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AMLXGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Machine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStartKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStartStateCrossReference_3_0 = (CrossReference)cStartAssignment_3.eContents().get(0);
		private final RuleCall cStartStateEStringParserRuleCall_3_0_1 = (RuleCall)cStartStateCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBricksKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cBricksAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cBricksBrickParserRuleCall_4_2_0 = (RuleCall)cBricksAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cBricksAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cBricksBrickParserRuleCall_4_3_1_0 = (RuleCall)cBricksAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cStatesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStatesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatesStateParserRuleCall_7_0 = (RuleCall)cStatesAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cStatesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_8_1_0 = (RuleCall)cStatesAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Machine:
		//	"Machine" "{" "start" start=[State|EString] ("bricks" "{" bricks+=Brick ("," bricks+=Brick)* "}")? "states" "{"
		//	states+=State ("," states+=State)* "}" "}";
		public ParserRule getRule() { return rule; }

		//"Machine" "{" "start" start=[State|EString] ("bricks" "{" bricks+=Brick ("," bricks+=Brick)* "}")? "states" "{"
		//states+=State ("," states+=State)* "}" "}"
		public Group getGroup() { return cGroup; }

		//"Machine"
		public Keyword getMachineKeyword_0() { return cMachineKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"start"
		public Keyword getStartKeyword_2() { return cStartKeyword_2; }

		//start=[State|EString]
		public Assignment getStartAssignment_3() { return cStartAssignment_3; }

		//[State|EString]
		public CrossReference getStartStateCrossReference_3_0() { return cStartStateCrossReference_3_0; }

		//EString
		public RuleCall getStartStateEStringParserRuleCall_3_0_1() { return cStartStateEStringParserRuleCall_3_0_1; }

		//("bricks" "{" bricks+=Brick ("," bricks+=Brick)* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"bricks"
		public Keyword getBricksKeyword_4_0() { return cBricksKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//bricks+=Brick
		public Assignment getBricksAssignment_4_2() { return cBricksAssignment_4_2; }

		//Brick
		public RuleCall getBricksBrickParserRuleCall_4_2_0() { return cBricksBrickParserRuleCall_4_2_0; }

		//("," bricks+=Brick)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//bricks+=Brick
		public Assignment getBricksAssignment_4_3_1() { return cBricksAssignment_4_3_1; }

		//Brick
		public RuleCall getBricksBrickParserRuleCall_4_3_1_0() { return cBricksBrickParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//"states"
		public Keyword getStatesKeyword_5() { return cStatesKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//states+=State
		public Assignment getStatesAssignment_7() { return cStatesAssignment_7; }

		//State
		public RuleCall getStatesStateParserRuleCall_7_0() { return cStatesStateParserRuleCall_7_0; }

		//("," states+=State)*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//states+=State
		public Assignment getStatesAssignment_8_1() { return cStatesAssignment_8_1; }

		//State
		public RuleCall getStatesStateParserRuleCall_8_1_0() { return cStatesStateParserRuleCall_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class BrickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Brick");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Brick:
		//	Sensor | Actuator;
		public ParserRule getRule() { return rule; }

		//Sensor | Actuator
		public Alternatives getAlternatives() { return cAlternatives; }

		//Sensor
		public RuleCall getSensorParserRuleCall_0() { return cSensorParserRuleCall_0; }

		//Actuator
		public RuleCall getActuatorParserRuleCall_1() { return cActuatorParserRuleCall_1; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDigitalSensorConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition:
		//	DigitalSensorCondition | TimeCondition;
		public ParserRule getRule() { return rule; }

		//DigitalSensorCondition | TimeCondition
		public Alternatives getAlternatives() { return cAlternatives; }

		//DigitalSensorCondition
		public RuleCall getDigitalSensorConditionParserRuleCall_0() { return cDigitalSensorConditionParserRuleCall_0; }

		//TimeCondition
		public RuleCall getTimeConditionParserRuleCall_1() { return cTimeConditionParserRuleCall_1; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTransitionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cTransitionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_2_0 = (RuleCall)cTransitionsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cTransitionsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_3_1_0 = (RuleCall)cTransitionsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cActionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cActionsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cActionsDigitalActionParserRuleCall_5_2_0 = (RuleCall)cActionsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cActionsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cActionsDigitalActionParserRuleCall_5_3_1_0 = (RuleCall)cActionsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//State:
		//	{State} "State" name=EString "{" ("transitions" "{" transitions+=Transition ("," transitions+=Transition)* "}")?
		//	("actions" "{" actions+=DigitalAction ("," actions+=DigitalAction)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{State} "State" name=EString "{" ("transitions" "{" transitions+=Transition ("," transitions+=Transition)* "}")?
		//("actions" "{" actions+=DigitalAction ("," actions+=DigitalAction)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{State}
		public Action getStateAction_0() { return cStateAction_0; }

		//"State"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("transitions" "{" transitions+=Transition ("," transitions+=Transition)* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"transitions"
		public Keyword getTransitionsKeyword_4_0() { return cTransitionsKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//transitions+=Transition
		public Assignment getTransitionsAssignment_4_2() { return cTransitionsAssignment_4_2; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_2_0() { return cTransitionsTransitionParserRuleCall_4_2_0; }

		//("," transitions+=Transition)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//transitions+=Transition
		public Assignment getTransitionsAssignment_4_3_1() { return cTransitionsAssignment_4_3_1; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_3_1_0() { return cTransitionsTransitionParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//("actions" "{" actions+=DigitalAction ("," actions+=DigitalAction)* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"actions"
		public Keyword getActionsKeyword_5_0() { return cActionsKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//actions+=DigitalAction
		public Assignment getActionsAssignment_5_2() { return cActionsAssignment_5_2; }

		//DigitalAction
		public RuleCall getActionsDigitalActionParserRuleCall_5_2_0() { return cActionsDigitalActionParserRuleCall_5_2_0; }

		//("," actions+=DigitalAction)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//actions+=DigitalAction
		public Assignment getActionsAssignment_5_3_1() { return cActionsAssignment_5_3_1; }

		//DigitalAction
		public RuleCall getActionsDigitalActionParserRuleCall_5_3_1_0() { return cActionsDigitalActionParserRuleCall_5_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPinKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPinAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPinEIntParserRuleCall_4_0 = (RuleCall)cPinAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Sensor:
		//	"Sensor" name=EString "{" "pin" pin=EInt "}";
		public ParserRule getRule() { return rule; }

		//"Sensor" name=EString "{" "pin" pin=EInt "}"
		public Group getGroup() { return cGroup; }

		//"Sensor"
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"pin"
		public Keyword getPinKeyword_3() { return cPinKeyword_3; }

		//pin=EInt
		public Assignment getPinAssignment_4() { return cPinAssignment_4; }

		//EInt
		public RuleCall getPinEIntParserRuleCall_4_0() { return cPinEIntParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActuatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPinKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPinAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPinEIntParserRuleCall_4_0 = (RuleCall)cPinAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Actuator:
		//	"Actuator" name=EString "{" "pin" pin=EInt "}";
		public ParserRule getRule() { return rule; }

		//"Actuator" name=EString "{" "pin" pin=EInt "}"
		public Group getGroup() { return cGroup; }

		//"Actuator"
		public Keyword getActuatorKeyword_0() { return cActuatorKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"pin"
		public Keyword getPinKeyword_3() { return cPinKeyword_3; }

		//pin=EInt
		public Assignment getPinAssignment_4() { return cPinAssignment_4; }

		//EInt
		public RuleCall getPinEIntParserRuleCall_4_0() { return cPinEIntParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGotoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGotoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cGotoStateCrossReference_3_0 = (CrossReference)cGotoAssignment_3.eContents().get(0);
		private final RuleCall cGotoStateEStringParserRuleCall_3_0_1 = (RuleCall)cGotoStateCrossReference_3_0.eContents().get(1);
		private final Keyword cConditionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConditionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionsConditionParserRuleCall_6_0 = (RuleCall)cConditionsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cConditionsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_7_1_0 = (RuleCall)cConditionsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Transition:
		//	"Transition" "{" "goto" goto=[State|EString] "conditions" "{" conditions+=Condition ("," conditions+=Condition)* "}"
		//	"}";
		public ParserRule getRule() { return rule; }

		//"Transition" "{" "goto" goto=[State|EString] "conditions" "{" conditions+=Condition ("," conditions+=Condition)* "}" "}"
		public Group getGroup() { return cGroup; }

		//"Transition"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"goto"
		public Keyword getGotoKeyword_2() { return cGotoKeyword_2; }

		//goto=[State|EString]
		public Assignment getGotoAssignment_3() { return cGotoAssignment_3; }

		//[State|EString]
		public CrossReference getGotoStateCrossReference_3_0() { return cGotoStateCrossReference_3_0; }

		//EString
		public RuleCall getGotoStateEStringParserRuleCall_3_0_1() { return cGotoStateEStringParserRuleCall_3_0_1; }

		//"conditions"
		public Keyword getConditionsKeyword_4() { return cConditionsKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//conditions+=Condition
		public Assignment getConditionsAssignment_6() { return cConditionsAssignment_6; }

		//Condition
		public RuleCall getConditionsConditionParserRuleCall_6_0() { return cConditionsConditionParserRuleCall_6_0; }

		//("," conditions+=Condition)*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//conditions+=Condition
		public Assignment getConditionsAssignment_7_1() { return cConditionsAssignment_7_1; }

		//Condition
		public RuleCall getConditionsConditionParserRuleCall_7_1_0() { return cConditionsConditionParserRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class DigitalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DigitalAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitalActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBStateDigitalBrickStateParserRuleCall_3_0 = (RuleCall)cBStateAssignment_3.eContents().get(0);
		private final Keyword cActuatorKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActuatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cActuatorActuatorCrossReference_5_0 = (CrossReference)cActuatorAssignment_5.eContents().get(0);
		private final RuleCall cActuatorActuatorEStringParserRuleCall_5_0_1 = (RuleCall)cActuatorActuatorCrossReference_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DigitalAction:
		//	"DigitalAction" "{" "bState" bState=DigitalBrickState "actuator" actuator=[Actuator|EString] "}";
		public ParserRule getRule() { return rule; }

		//"DigitalAction" "{" "bState" bState=DigitalBrickState "actuator" actuator=[Actuator|EString] "}"
		public Group getGroup() { return cGroup; }

		//"DigitalAction"
		public Keyword getDigitalActionKeyword_0() { return cDigitalActionKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"bState"
		public Keyword getBStateKeyword_2() { return cBStateKeyword_2; }

		//bState=DigitalBrickState
		public Assignment getBStateAssignment_3() { return cBStateAssignment_3; }

		//DigitalBrickState
		public RuleCall getBStateDigitalBrickStateParserRuleCall_3_0() { return cBStateDigitalBrickStateParserRuleCall_3_0; }

		//"actuator"
		public Keyword getActuatorKeyword_4() { return cActuatorKeyword_4; }

		//actuator=[Actuator|EString]
		public Assignment getActuatorAssignment_5() { return cActuatorAssignment_5; }

		//[Actuator|EString]
		public CrossReference getActuatorActuatorCrossReference_5_0() { return cActuatorActuatorCrossReference_5_0; }

		//EString
		public RuleCall getActuatorActuatorEStringParserRuleCall_5_0_1() { return cActuatorActuatorEStringParserRuleCall_5_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class DigitalSensorConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DigitalSensorCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitalSensorConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBStateDigitalBrickStateParserRuleCall_3_0 = (RuleCall)cBStateAssignment_3.eContents().get(0);
		private final Keyword cSensorKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSensorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSensorSensorCrossReference_5_0 = (CrossReference)cSensorAssignment_5.eContents().get(0);
		private final RuleCall cSensorSensorEStringParserRuleCall_5_0_1 = (RuleCall)cSensorSensorCrossReference_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DigitalSensorCondition:
		//	"DigitalSensorCondition" "{" "bState" bState=DigitalBrickState "sensor" sensor=[Sensor|EString] "}";
		public ParserRule getRule() { return rule; }

		//"DigitalSensorCondition" "{" "bState" bState=DigitalBrickState "sensor" sensor=[Sensor|EString] "}"
		public Group getGroup() { return cGroup; }

		//"DigitalSensorCondition"
		public Keyword getDigitalSensorConditionKeyword_0() { return cDigitalSensorConditionKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"bState"
		public Keyword getBStateKeyword_2() { return cBStateKeyword_2; }

		//bState=DigitalBrickState
		public Assignment getBStateAssignment_3() { return cBStateAssignment_3; }

		//DigitalBrickState
		public RuleCall getBStateDigitalBrickStateParserRuleCall_3_0() { return cBStateDigitalBrickStateParserRuleCall_3_0; }

		//"sensor"
		public Keyword getSensorKeyword_4() { return cSensorKeyword_4; }

		//sensor=[Sensor|EString]
		public Assignment getSensorAssignment_5() { return cSensorAssignment_5; }

		//[Sensor|EString]
		public CrossReference getSensorSensorCrossReference_5_0() { return cSensorSensorCrossReference_5_0; }

		//EString
		public RuleCall getSensorSensorEStringParserRuleCall_5_0_1() { return cSensorSensorEStringParserRuleCall_5_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class TimeConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTimeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTimeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimeEIntParserRuleCall_3_0 = (RuleCall)cTimeAssignment_3.eContents().get(0);
		private final Keyword cTCompKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTCompAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTCompComparisonParserRuleCall_5_0 = (RuleCall)cTCompAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TimeCondition:
		//	"TimeCondition" "{" "time" time=EInt "tComp" tComp=Comparison "}";
		public ParserRule getRule() { return rule; }

		//"TimeCondition" "{" "time" time=EInt "tComp" tComp=Comparison "}"
		public Group getGroup() { return cGroup; }

		//"TimeCondition"
		public Keyword getTimeConditionKeyword_0() { return cTimeConditionKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"time"
		public Keyword getTimeKeyword_2() { return cTimeKeyword_2; }

		//time=EInt
		public Assignment getTimeAssignment_3() { return cTimeAssignment_3; }

		//EInt
		public RuleCall getTimeEIntParserRuleCall_3_0() { return cTimeEIntParserRuleCall_3_0; }

		//"tComp"
		public Keyword getTCompKeyword_4() { return cTCompKeyword_4; }

		//tComp=Comparison
		public Assignment getTCompAssignment_5() { return cTCompAssignment_5; }

		//Comparison
		public RuleCall getTCompComparisonParserRuleCall_5_0() { return cTCompComparisonParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class DigitalBrickStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DigitalBrickState");
		private final Keyword cDigitalBrickStateKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / DigitalBrickState:
		//	"DigitalBrickState";
		public ParserRule getRule() { return rule; }

		//"DigitalBrickState"
		public Keyword getDigitalBrickStateKeyword() { return cDigitalBrickStateKeyword; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Keyword cComparisonKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Comparison:
		//	"Comparison";
		public ParserRule getRule() { return rule; }

		//"Comparison"
		public Keyword getComparisonKeyword() { return cComparisonKeyword; }
	}
	
	
	private MachineElements pMachine;
	private BrickElements pBrick;
	private ConditionElements pCondition;
	private StateElements pState;
	private EStringElements pEString;
	private EIntElements pEInt;
	private SensorElements pSensor;
	private ActuatorElements pActuator;
	private TransitionElements pTransition;
	private DigitalActionElements pDigitalAction;
	private DigitalSensorConditionElements pDigitalSensorCondition;
	private TimeConditionElements pTimeCondition;
	private DigitalBrickStateElements pDigitalBrickState;
	private ComparisonElements pComparison;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AMLXGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("arduinoml.AMLX".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Machine:
	//	"Machine" "{" "start" start=[State|EString] ("bricks" "{" bricks+=Brick ("," bricks+=Brick)* "}")? "states" "{"
	//	states+=State ("," states+=State)* "}" "}";
	public MachineElements getMachineAccess() {
		return (pMachine != null) ? pMachine : (pMachine = new MachineElements());
	}
	
	public ParserRule getMachineRule() {
		return getMachineAccess().getRule();
	}

	//Brick:
	//	Sensor | Actuator;
	public BrickElements getBrickAccess() {
		return (pBrick != null) ? pBrick : (pBrick = new BrickElements());
	}
	
	public ParserRule getBrickRule() {
		return getBrickAccess().getRule();
	}

	//Condition:
	//	DigitalSensorCondition | TimeCondition;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//State:
	//	{State} "State" name=EString "{" ("transitions" "{" transitions+=Transition ("," transitions+=Transition)* "}")?
	//	("actions" "{" actions+=DigitalAction ("," actions+=DigitalAction)* "}")? "}";
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//Sensor:
	//	"Sensor" name=EString "{" "pin" pin=EInt "}";
	public SensorElements getSensorAccess() {
		return (pSensor != null) ? pSensor : (pSensor = new SensorElements());
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}

	//Actuator:
	//	"Actuator" name=EString "{" "pin" pin=EInt "}";
	public ActuatorElements getActuatorAccess() {
		return (pActuator != null) ? pActuator : (pActuator = new ActuatorElements());
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}

	//Transition:
	//	"Transition" "{" "goto" goto=[State|EString] "conditions" "{" conditions+=Condition ("," conditions+=Condition)* "}"
	//	"}";
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//DigitalAction:
	//	"DigitalAction" "{" "bState" bState=DigitalBrickState "actuator" actuator=[Actuator|EString] "}";
	public DigitalActionElements getDigitalActionAccess() {
		return (pDigitalAction != null) ? pDigitalAction : (pDigitalAction = new DigitalActionElements());
	}
	
	public ParserRule getDigitalActionRule() {
		return getDigitalActionAccess().getRule();
	}

	//DigitalSensorCondition:
	//	"DigitalSensorCondition" "{" "bState" bState=DigitalBrickState "sensor" sensor=[Sensor|EString] "}";
	public DigitalSensorConditionElements getDigitalSensorConditionAccess() {
		return (pDigitalSensorCondition != null) ? pDigitalSensorCondition : (pDigitalSensorCondition = new DigitalSensorConditionElements());
	}
	
	public ParserRule getDigitalSensorConditionRule() {
		return getDigitalSensorConditionAccess().getRule();
	}

	//TimeCondition:
	//	"TimeCondition" "{" "time" time=EInt "tComp" tComp=Comparison "}";
	public TimeConditionElements getTimeConditionAccess() {
		return (pTimeCondition != null) ? pTimeCondition : (pTimeCondition = new TimeConditionElements());
	}
	
	public ParserRule getTimeConditionRule() {
		return getTimeConditionAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / DigitalBrickState:
	//	"DigitalBrickState";
	public DigitalBrickStateElements getDigitalBrickStateAccess() {
		return (pDigitalBrickState != null) ? pDigitalBrickState : (pDigitalBrickState = new DigitalBrickStateElements());
	}
	
	public ParserRule getDigitalBrickStateRule() {
		return getDigitalBrickStateAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Comparison:
	//	"Comparison";
	public ComparisonElements getComparisonAccess() {
		return (pComparison != null) ? pComparison : (pComparison = new ComparisonElements());
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
