// automatically generated by Xtext
grammar arduinoml.AMLX with org.eclipse.xtext.common.Terminals

import "http://arduinoml/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Machine returns Machine:
	'Machine'
	'{'
		'start' start=[State|EString]
		('bricks' '{' bricks+=Brick ( "," bricks+=Brick)* '}' )?
		'states' '{' states+=State ( "," states+=State)* '}' 
	'}';

Brick returns Brick:
	Brick_Impl | Sensor | Actuator;







Brick_Impl returns Brick:
	'Brick'
	'{'
		'Name' Name=EString
		'Pin' Pin=EInt
	'}';

State returns State:
	'State'
	'{'
		'Name' Name=EString
		('transitions' '{' transitions+=Transition ( "," transitions+=Transition)* '}' )?
		('actions' '{' actions+=Action ( "," actions+=Action)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

Sensor returns Sensor:
	'Sensor'
	'{'
		'Name' Name=EString
		'Pin' Pin=EInt
	'}';

Actuator returns Actuator:
	'Actuator'
	'{'
		'Name' Name=EString
		'Pin' Pin=EInt
	'}';

Transition returns Transition:
	'Transition'
	'{'
		'goto' goto=[State|EString]
		'conditions' '{' conditions+=Condition ( "," conditions+=Condition)* '}' 
	'}';

Action returns Action:
	'Action'
	'{'
		'BState' BState=BrickState
		'actuator' actuator=[Actuator|EString]
	'}';

Condition returns Condition:
	'Condition'
	'{'
		'BState' BState=BrickState
		'sensor' sensor=[Sensor|EString]
	'}';

BrickState returns BrickState:
	'BrickState' /* TODO: implement this rule and an appropriate IValueConverter */;
