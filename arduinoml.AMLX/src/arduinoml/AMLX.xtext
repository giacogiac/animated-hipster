grammar arduinoml.AMLX with org.eclipse.xtext.common.Terminals

import "http://arduinoml/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AMLMachine returns AMLMachine:
	('frequency' frequency=EInt 'Hz')?
	'start' start=[AMLState|EString]
	(bricks+=Brick)*
	states+=AMLState (states+=AMLState)*;

Brick returns Brick:
	DigitalSensor | DigitalActuator | AnalogSensor | AnalogActuator;

Action returns Action:
	DigitalAction | AnalogActionValue | AnalogActionSensor;

Condition returns Condition:
	DigitalCondition | TimeCondition | AnalogCondition;

AMLState returns AMLState:
	{AMLState}
	'State' name=EString ':'
		(actions+=Action)*
		(transitions+=Transition)*;

EInt returns ecore::EInt:
	INT;

EString returns ecore::EString:
	STRING | ID;

DigitalSensor returns DigitalSensor:
	{DigitalSensor}
	'DigitalSensor' name=EString;

DigitalActuator returns DigitalActuator:
	{DigitalActuator}
	'DigitalActuator' name=EString;

AnalogSensor returns AnalogSensor:
	{AnalogSensor}
	'AnalogSensor' name=EString;

AnalogActuator returns AnalogActuator:
	{AnalogActuator}
	'AnalogActuator' name=EString;

Transition returns Transition:
	'goto' goto=[AMLState|EString] 'if' conditions+=Condition ( "and" conditions+=Condition)*;

DigitalCondition returns DigitalCondition:
	sensor=[DigitalSensor|EString] 'is' dState=DigitalState;

TimeCondition returns TimeCondition:
	tComp=TimeComparison time=EInt 'ms';

AnalogCondition returns AnalogCondition:
	sensor=[AnalogSensor|EString] aComp=AnalogComparison value=EInt;

enum DigitalState returns DigitalState:
	ON = "ON" | OFF = "OFF";

enum TimeComparison returns TimeComparison:
	AFTER = "after" | BEFORE = "before";

enum AnalogComparison returns AnalogComparison:
	GREATER = ">" | GREATEREQ = ">=" | EQUAL = "=" | LOWEREQ = "<=" | LOWER = "<";

DigitalAction returns DigitalAction:
	'set' actuator=[DigitalActuator|EString] 'to' dState=DigitalState;

AnalogActionValue returns AnalogActionValue:
	'set' actuator=[AnalogActuator|EString] 'to' value=EInt;

AnalogActionSensor returns AnalogActionSensor:
		'set' sensor=[AnalogSensor|EString] 'to' actuator=[AnalogActuator|EString];
