grammar arduinoml.AMLX with org.eclipse.xtext.common.Terminals

import "http://arduinoml/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AMLMachine returns AMLMachine:
	'Machine'
	'{'
		'start' start=[AMLState|EString]
		('bricks' '{' bricks+=Brick ( "," bricks+=Brick)* '}' )?
		'states' '{' states+=AMLState ( "," states+=AMLState)* '}' 
	'}';

Brick returns Brick:
	Sensor | Actuator;

Condition returns Condition:
	DigitalSensorCondition | TimeCondition;

AMLState returns AMLState:
	{AMLState}
	'State'
	name=EString
	'{'
		('transitions' '{' transitions+=Transition ( "," transitions+=Transition)* '}' )?
		('actions' '{' actions+=DigitalAction ( "," actions+=DigitalAction)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

Sensor returns Sensor:
	'Sensor'
	name=EString
	'{'
		'pin' pin=EInt
	'}';

Actuator returns Actuator:
	'Actuator'
	name=EString
	'{'
		'pin' pin=EInt
	'}';

Transition returns Transition:
	'Transition'
	'{'
		'goto' goto=[AMLState|EString]
		'conditions' '{' conditions+=Condition ( "," conditions+=Condition)* '}' 
	'}';

DigitalAction returns DigitalAction:
	'DigitalAction'
	'{'
		'bState' bState=DigitalBrickState
		'actuator' actuator=[Actuator|EString]
	'}';

DigitalSensorCondition returns DigitalSensorCondition:
	'DigitalSensorCondition'
	'{'
		'bState' bState=DigitalBrickState
		'sensor' sensor=[Sensor|EString]
	'}';

TimeCondition returns TimeCondition:
	'TimeCondition'
	'{'
		'time' time=EInt
		'tComp' tComp=Comparison
	'}';

enum DigitalBrickState returns DigitalBrickState:
	ON = "ON" | OFF = "OFF";

enum Comparison returns Comparison:
	SUPERIOR = ">" | INFERIOR = "<" | EQUAL = "=";
