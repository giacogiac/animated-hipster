/*
* generated by Xtext
*/
grammar InternalAMLX;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package arduinoml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package arduinoml.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import arduinoml.services.AMLXGrammarAccess;

}

@parser::members {

 	private AMLXGrammarAccess grammarAccess;
 	
    public InternalAMLXParser(TokenStream input, AMLXGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Machine";	
   	}
   	
   	@Override
   	protected AMLXGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMachine
entryRuleMachine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMachineRule()); }
	 iv_ruleMachine=ruleMachine 
	 { $current=$iv_ruleMachine.current; } 
	 EOF 
;

// Rule Machine
ruleMachine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Machine' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMachineAccess().getMachineKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMachineAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='start' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMachineAccess().getStartKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMachineRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMachineAccess().getStartStateCrossReference_3_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='bricks' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMachineAccess().getBricksKeyword_4_0());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMachineAccess().getLeftCurlyBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMachineAccess().getBricksBrickParserRuleCall_4_2_0()); 
	    }
		lv_bricks_6_0=ruleBrick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMachineRule());
	        }
       		add(
       			$current, 
       			"bricks",
        		lv_bricks_6_0, 
        		"Brick");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMachineAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMachineAccess().getBricksBrickParserRuleCall_4_3_1_0()); 
	    }
		lv_bricks_8_0=ruleBrick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMachineRule());
	        }
       		add(
       			$current, 
       			"bricks",
        		lv_bricks_8_0, 
        		"Brick");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMachineAccess().getRightCurlyBracketKeyword_4_4());
    }
)?	otherlv_10='states' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMachineAccess().getStatesKeyword_5());
    }
	otherlv_11='{' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMachineAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMachineAccess().getStatesStateParserRuleCall_7_0()); 
	    }
		lv_states_12_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMachineRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_12_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getMachineAccess().getCommaKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMachineAccess().getStatesStateParserRuleCall_8_1_0()); 
	    }
		lv_states_14_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMachineRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_14_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getMachineAccess().getRightCurlyBracketKeyword_9());
    }
	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getMachineAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleBrick
entryRuleBrick returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBrickRule()); }
	 iv_ruleBrick=ruleBrick 
	 { $current=$iv_ruleBrick.current; } 
	 EOF 
;

// Rule Brick
ruleBrick returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBrickAccess().getSensorParserRuleCall_0()); 
    }
    this_Sensor_0=ruleSensor
    { 
        $current = $this_Sensor_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBrickAccess().getActuatorParserRuleCall_1()); 
    }
    this_Actuator_1=ruleActuator
    { 
        $current = $this_Actuator_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getDigitalSensorConditionParserRuleCall_0()); 
    }
    this_DigitalSensorCondition_0=ruleDigitalSensorCondition
    { 
        $current = $this_DigitalSensorCondition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getTimeConditionParserRuleCall_1()); 
    }
    this_TimeCondition_1=ruleTimeCondition
    { 
        $current = $this_TimeCondition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStateAccess().getStateAction_0(),
            $current);
    }
)	otherlv_1='State' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateAccess().getStateKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='transitions' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStateAccess().getTransitionsKeyword_4_0());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getTransitionsTransitionParserRuleCall_4_2_0()); 
	    }
		lv_transitions_6_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_6_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStateAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getTransitionsTransitionParserRuleCall_4_3_1_0()); 
	    }
		lv_transitions_8_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_8_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_4_4());
    }
)?(	otherlv_10='actions' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStateAccess().getActionsKeyword_5_0());
    }
	otherlv_11='{' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getActionsDigitalActionParserRuleCall_5_2_0()); 
	    }
		lv_actions_12_0=ruleDigitalAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_12_0, 
        		"DigitalAction");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getStateAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getActionsDigitalActionParserRuleCall_5_3_1_0()); 
	    }
		lv_actions_14_0=ruleDigitalAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_14_0, 
        		"DigitalAction");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5_4());
    }
)?	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSensorRule()); }
	 iv_ruleSensor=ruleSensor 
	 { $current=$iv_ruleSensor.current; } 
	 EOF 
;

// Rule Sensor
ruleSensor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Sensor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSensorAccess().getSensorKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSensorAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='pin' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSensorAccess().getPinKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorAccess().getPinEIntParserRuleCall_4_0()); 
	    }
		lv_pin_4_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorRule());
	        }
       		set(
       			$current, 
       			"pin",
        		lv_pin_4_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSensorAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleActuator
entryRuleActuator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActuatorRule()); }
	 iv_ruleActuator=ruleActuator 
	 { $current=$iv_ruleActuator.current; } 
	 EOF 
;

// Rule Actuator
ruleActuator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Actuator' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActuatorAccess().getActuatorKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActuatorAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActuatorRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActuatorAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='pin' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getActuatorAccess().getPinKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActuatorAccess().getPinEIntParserRuleCall_4_0()); 
	    }
		lv_pin_4_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActuatorRule());
	        }
       		set(
       			$current, 
       			"pin",
        		lv_pin_4_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getActuatorAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Transition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionAccess().getTransitionKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='goto' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransitionAccess().getGotoKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getGotoStateCrossReference_3_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='conditions' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransitionAccess().getConditionsKeyword_4());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getConditionsConditionParserRuleCall_6_0()); 
	    }
		lv_conditions_6_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"conditions",
        		lv_conditions_6_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTransitionAccess().getCommaKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getConditionsConditionParserRuleCall_7_1_0()); 
	    }
		lv_conditions_8_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"conditions",
        		lv_conditions_8_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_8());
    }
	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleDigitalAction
entryRuleDigitalAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDigitalActionRule()); }
	 iv_ruleDigitalAction=ruleDigitalAction 
	 { $current=$iv_ruleDigitalAction.current; } 
	 EOF 
;

// Rule DigitalAction
ruleDigitalAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='DigitalAction' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDigitalActionAccess().getDigitalActionKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDigitalActionAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='bState' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDigitalActionAccess().getBStateKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDigitalActionAccess().getBStateDigitalBrickStateParserRuleCall_3_0()); 
	    }
		lv_bState_3_0=ruleDigitalBrickState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDigitalActionRule());
	        }
       		set(
       			$current, 
       			"bState",
        		lv_bState_3_0, 
        		"DigitalBrickState");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='actuator' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDigitalActionAccess().getActuatorKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDigitalActionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDigitalActionAccess().getActuatorActuatorCrossReference_5_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDigitalActionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleDigitalSensorCondition
entryRuleDigitalSensorCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDigitalSensorConditionRule()); }
	 iv_ruleDigitalSensorCondition=ruleDigitalSensorCondition 
	 { $current=$iv_ruleDigitalSensorCondition.current; } 
	 EOF 
;

// Rule DigitalSensorCondition
ruleDigitalSensorCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='DigitalSensorCondition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDigitalSensorConditionAccess().getDigitalSensorConditionKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDigitalSensorConditionAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='bState' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDigitalSensorConditionAccess().getBStateKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDigitalSensorConditionAccess().getBStateDigitalBrickStateParserRuleCall_3_0()); 
	    }
		lv_bState_3_0=ruleDigitalBrickState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDigitalSensorConditionRule());
	        }
       		set(
       			$current, 
       			"bState",
        		lv_bState_3_0, 
        		"DigitalBrickState");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='sensor' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDigitalSensorConditionAccess().getSensorKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDigitalSensorConditionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDigitalSensorConditionAccess().getSensorSensorCrossReference_5_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDigitalSensorConditionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleTimeCondition
entryRuleTimeCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeConditionRule()); }
	 iv_ruleTimeCondition=ruleTimeCondition 
	 { $current=$iv_ruleTimeCondition.current; } 
	 EOF 
;

// Rule TimeCondition
ruleTimeCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TimeCondition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTimeConditionAccess().getTimeConditionKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTimeConditionAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='time' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTimeConditionAccess().getTimeKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTimeConditionAccess().getTimeEIntParserRuleCall_3_0()); 
	    }
		lv_time_3_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeConditionRule());
	        }
       		set(
       			$current, 
       			"time",
        		lv_time_3_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='tComp' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTimeConditionAccess().getTCompKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTimeConditionAccess().getTCompComparisonParserRuleCall_5_0()); 
	    }
		lv_tComp_5_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeConditionRule());
	        }
       		set(
       			$current, 
       			"tComp",
        		lv_tComp_5_0, 
        		"Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTimeConditionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleDigitalBrickState
entryRuleDigitalBrickState returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDigitalBrickStateRule()); } 
	 iv_ruleDigitalBrickState=ruleDigitalBrickState 
	 { $current=$iv_ruleDigitalBrickState.current.getText(); }  
	 EOF 
;

// Rule DigitalBrickState
ruleDigitalBrickState returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DigitalBrickState' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDigitalBrickStateAccess().getDigitalBrickStateKeyword()); 
    }

    ;





// Entry rule entryRuleComparison
entryRuleComparison returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); } 
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current.getText(); }  
	 EOF 
;

// Rule Comparison
ruleComparison returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Comparison' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparisonAccess().getComparisonKeyword()); 
    }

    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


